#!/usr/bin/env python

# to fix
# make sure number of parallel streams is respected
# check that files are copied right by checking their size 

import subprocess, threading, os, sys,time
import urllib2
import optparse

import pycurl
try:
    from io import BytesIO
except ImportError:
    from StringIO import StringIO as BytesIO

import ConfigParser

try: import simplejson as json
except ImportError: import json


parser = optparse.OptionParser(description="Getting a DS through FAX.", version="%prog version 2.0", usage="Usage: %prog [options] dataset")

parser.add_option('-r', '--retries', help='a number of retries. Defaults to 3.', default=3, dest='Retries')
parser.add_option('-s', '--streams', help='a number of parallel xrdcp streams to use. Defaults to 4.', default=4, dest='Streams')
parser.add_option('-t', '--timeout', help='seconds to wait before timing out an individual xrdcp. Default is 3600.', default=3600, dest='Timeout')
parser.add_option('-f', '--files',   help='a number of files to copy', default=0, dest='FilesToCopy', metavar="N FILES")
parser.add_option('-x', '--extreme', help='use extreme copy', dest='Extreme', action='store_true', default=False)
parser.add_option('-i', '--incomplete', help='copy incomplete datasets too', dest='Incomplete', action='store_true', default=False)
parser.add_option('-g', '--nonRoot', help='copy non Root files too', dest='NonRoot', action='store_true', default=False)
parser.add_option('-v', '--verbose', action="store_true", dest="verbose", default=False)
parser.add_option('-q', '--quiet',   action="store_false", dest="verbose")


try:
    from dq2.clientapi.DQ2 import DQ2
except ImportError:
    print "Environment not set [error importing DQ2 dependencies]!"
    sys.exit(1)


class Command(object):

    def __init__(self, cmd):
        self.cmd = cmd
        self.process = None

    def run(self, timeout):
        def target():
            #print 'command started: ', self.cmd
            self.process = subprocess.Popen(self.cmd, shell=True)
            self.process.communicate()
        
        thread = threading.Thread(target=target)
        thread.start()
        thread.join(timeout)
        if thread.is_alive():
            print 'Terminating process'
            self.process.terminate()
            thread.join()
        return self.process.returncode


class dsfile:
    def __init__(self, sc, na, si=0):
        self.scope=sc
        self.filename=na
        self.size=si
        self.attempts=0
    def prnt(self):
        print 'file:',self.scope+':'+self.filename,"\tsize:",str(self.size),"\tattempts:",str(self.attempts)
    
class dataset:
    def __init__(self):
        self.complete=0
        self.incomplete=0
        self.files=[]

class site:
    host=''
    port=1094
    def __init__(self, ho):
        ho=ho.replace("root://","")
        self.host=ho.split(":")[0]
        if ho.count(":"):
            self.port=ho.split(":")[1]
        self.ddms=[]
    def prnt(self):
        print  'host:', self.host, '\tport:', self.port, '\tddms:', self.ddms



def LFNs(idsn):
    
    ret = DQ2().listFilesInDataset(idsn)
    
    try:
        entry = ret[0]
    except IndexError, e:
        sys.exit(0)
    
    roots=[]
    
    for guid in entry:
        scope, lfn, fs = entry[guid]['scope'], entry[guid]['lfn'], entry[guid]['filesize']
        if lfn.count('.root')==0 and opts.NonRoot : continue
        # gfn=redir+'/atlas/rucio/' + correctedscope+"/"+lfn
        roots.append(dsfile(scope, lfn, fs))
        
    if (opts.verbose): 
        print idsn, len(roots), "root files."
    
    return roots
    
# =========================================================================================


(opts, args) = parser.parse_args()

if (len(args)==0):
    parser.print_help()
    exit(-1)

DS=args[0]

if os.environ.get("STORAGEPREFIX") != None:
    redir=os.environ.get("STORAGEPREFIX")
else:
    print "no FAX redirector given. Please set up FAX (localSetupFAX) or run fax-setRedirector.(c)sh, first. "
    sys.exit(1)

if os.environ.get("RUCIO_ACCOUNT") != None:
    rucio_account=os.environ.get("RUCIO_ACCOUNT")
else:
    print "no RUCIO_ACCOUNT environment found. Please set it before using this program. "
    sys.exit(1) 

if os.environ.get("RUCIO_HOME") != None:
    rucio_home=os.environ.get("RUCIO_HOME")
else:
    print "no RUCIO_ACCOUNT environment found. Please set it before using this program. "
    sys.exit(1) 

if (opts.verbose): print '#reading rucio configuration file...'

Config = ConfigParser.ConfigParser()
Config.read(rucio_home + "/etc/rucio.cfg")
rucio_host= Config.get("client","rucio_host")
auth_host= Config.get("client","auth_host")
ca_cert= Config.get("client","ca_cert")
client_cert= Config.get("client","client_cert")
client_key= Config.get("client","client_key")
client_x509_proxy= Config.get("client","client_x509_proxy")
request_retries= Config.get("client","request_retries")

sites={}

try:
    if (opts.verbose): print "#getting FAX endpoints from AGISrepeater..."
    req = urllib2.Request("http://atlas-agis-api.cern.ch/request/service/query/get_se_services/?json&state=ACTIVE&flavour=XROOTD", None)
    opener = urllib2.build_opener()
    f = opener.open(req)
    res=json.load(f)
    for s in res:
        if (opts.verbose): print s["name"], s["rc_site"], s["endpoint"]
        sites[s["rc_site"]]=site(s["endpoint"])
#    print res
except:
    print "Could not get FAX endpoints from AGIS. Exiting..."
    print "Unexpected error:", sys.exc_info()[0]
    sys.exit(1)
    
#for s in sites:  print s, sites[s].prnt()
    
    
if (opts.verbose):  print '--------------- Getting all of the DDM endpoints. ---------------'

try:
    req = urllib2.Request("http://atlas-agis-api.cern.ch/request/ddmendpoint/query/list/?json&state=ACTIVE", None)
    opener = urllib2.build_opener()
    f = opener.open(req)
    res=json.load(f)
    for s in res:
        sn=s["rc_site"]
        if sn in sites:
#            print sn, s["name"]
            sites[sn].ddms.append(s["name"])
                
#    print ' got related ddmendpoints from agis.'

except:
    print "Could not get DDM endpoint names from AGIS. Exiting..."
    print "Unexpected error:", sys.exc_info()[0]
    sys.exit(1)

#for s in sites: print s, sites[s].prnt()


if (opts.verbose):  print '--------------- Getting rucio auth token ------------------'

#b = BytesIO()
h = BytesIO()
c = pycurl.Curl()
c.setopt(pycurl.URL, auth_host+"/auth/x509_proxy")
c.setopt(pycurl.CAINFO, rucio_home+"/etc/ca.crt")
c.setopt(pycurl.SSLKEY, '/tmp/x509up_u20074')
c.setopt(pycurl.SSLCERT, '/tmp/x509up_u20074') 
c.setopt(pycurl.HTTPHEADER, ['X-Rucio-Account: ivukotic'])
c.setopt(pycurl.HEADERFUNCTION, h.write)
#c.setopt(pycurl.WRITEFUNCTION, b.write)
c.setopt(pycurl.SSL_VERIFYPEER, 1)
c.setopt(pycurl.SSL_VERIFYHOST, 2)
c.perform()

if (opts.verbose):
    print('Status: %d' % c.getinfo(c.RESPONSE_CODE))
    print('Time: %f' % c.getinfo(c.TOTAL_TIME))
    print h.getvalue()
    
if c.getinfo(c.RESPONSE_CODE)!=200:
    print 'could not get Rucio authentication. Exiting'
    sys.exit(1)

auth_token=None
for he in h.getvalue():
    if (opts.verbose): print he
    if he.count('X-Rucio-Auth-Token')>0: auth_token=he

if auth_token is None:
    print 'could not get Rucio authentication token. Exiting.'
    sys.exit(1) 
   
c.close()

#curl -s -i --cacert /opt/rucio/etc/web/ca.crt -H "X-Rucio-Account: vgaronne" --cert $X509_USER_PROXY --key $X509_USER_PROXY -X GET https://localhost/auth/x509_proxy
#HTTP/1.1 200 OK
#Date: Mon, 15 Oct 2012 10:58:37 GMT
#Server: Apache/2.2.22 (Unix) mod_ssl/2.2.22 OpenSSL/0.9.8r DAV/2 mod_wsgi/3.3 Python/2.7.3 PHP/5.3.15 mod_fastcgi/2.4.2
#X-X-X-Rucio-Auth-Token: 10520defe5314ef68677be7a479152ae

#curl -s -i --cacert $RUCIO_HOME/etc/ca.crt -H "X-Rucio-Account: $RUCIO_ACCOUNT" --cert $X509_USER_PROXY --key $X509_USER_PROXY -X GET https://voatlasrucio-auth-prod.cern.ch/auth/x509_proxy

#-H "X-Rucio-Auth-Token: $TOKEN"
#GET datasets/{scopeName}/{datasetName}/  List dataset content.
#GET /files/{scopeName}/locations/ list file replicas


if (opts.verbose):  print '--------------- Getting all of the DDM endpoints having a replica. ------------------'

com=Command('dq2-ls -r '+ DS + ' > fax.tmp' )
com.run(300)
dsets={}
cds=''
f = open('fax.tmp', 'r')
for line in f:
    if line.startswith('Multiple'): break
    line=line.strip()
    if line.count(':')==0:continue
    line=line.split(":")
  #  print line

    if line[0]=='INCOMPLETE':
        if len(line[1])==0 or not opts.Incomplete: continue
        rep=line[1].split(',')
        for r in rep:
            r=r.strip()
            for s in sites:
                if r in sites[s].ddms:
                    dsets[cds].incomplete+=1
        continue

    if line[0]=='COMPLETE':
        if len(line[1])==0: continue
        rep=line[1].split(',')
        for r in rep:
            r=r.strip()
            for s in sites:
                if r in sites[s].ddms:
                    dsets[cds].complete+=1
        continue

    cds=line[0]
    dsets[cds]=dataset()

for d  in dsets.keys():
    print d,'\tcomplete replicas:',dsets[d].complete,'\tincomplete:',dsets[d].incomplete

com=Command('rm -f fax.tmp' )
com.run(10)



if (opts.verbose):  print '--------------- find all the files ----------------------'
for d in dsets.keys():
    dsets[d].files=LFNs(d)
     

if (opts.verbose):  print '--------------- copying the files ----------------------'

copied=0

for d in dsets.keys():
    print 'copying dataset: ', d
    
    if not os.path.exists(d):
        os.makedirs(d)
        
    for r in dsets[d].files:
        if ( opts.FilesToCopy>0 and copied>=opts.FilesToCopy): continue
        while(threading.active_count()>=opts.Streams):
            time.sleep(1)
        
        print 'starting copy of ', r.scope+":"+r.filename
        c='xrdcp '+ redir+"/atlas/rucio/"+r.scope+":"+r.filename + ' '+d+'/'+r.filename 
        if (opts.verbose): print 'executing: ', c
        com=Command( c )
        com.run(opts.Timeout)
        copied+=1
        
        
        