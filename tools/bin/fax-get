#!/usr/bin/env python

# to fix
# check that files are copied right by checking their size 

import signal, subprocess, Queue, os, sys,time, datetime
import threading
from threading import Thread
import urllib2
import optparse, logging

import rucio
import rucio.client
import rucio.common.config as conf

try: import simplejson as json
except ImportError: import json


parser = optparse.OptionParser(description="Getting a DS through FAX.", version="%prog version 2.0", usage="Usage: %prog [options] dataset")

parser.add_option('-r', '--retries', help='a number of retries. Defaults to 3.', default=3, dest='Retries')
parser.add_option('-s', '--streams', help='a number of parallel xrdcp streams to use. Defaults to 4.', default=4, dest='Streams')
parser.add_option('-t', '--timeout', help='seconds to wait before timing out an individual xrdcp. Default is 3600.', default=3600, dest='Timeout')
parser.add_option('-f', '--files',   help='a number of files to copy', default=0, dest='FilesToCopy', metavar="N FILES")
parser.add_option('-x', '--extreme', help='use extreme copy', dest='Extreme', action='store_true', default=False)
parser.add_option('-i', '--incomplete', help='copy incomplete datasets too', dest='Incomplete', action='store_true', default=False)
parser.add_option('-g', '--nonRoot', help='copy non Root files too', dest='NonRoot', action='store_true', default=False)
parser.add_option('-l', '--log', help='logging level (DEBUG, INFO, WARNING, ERROR)', default="INFO", dest='loglev')
parser.add_option('-o', '--out', help='file to write logging stream into', default="", dest='logfile')
parser.add_option('-d', '--discard', help='copy to /dev/null. Only for performance measurements.', default=False, action='store_true', dest='discard')




def signal_handler(signal, frame):
    logging.info('You pressed Ctrl+C!')
    with q.mutex:
        q.queue.clear()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)


class dsfile:
    def __init__(self, sc, na, si, ad):
        self.scope=sc
        self.name=na
        self.size=si
        self.adler32=ad
        self.attempts=0
        self.reps=[]
        self.areps=[]
        self.arepsPNFS=[]
        self.aExpectedRates=[]
    def prnt(self):
        logging.debug( 'file: %s:%s  size:%.3f \t attempts:%i' % (self.scope, self.name, self.size/1024/1024, self.attempts))
        for i in range(len(self.areps)):
            logging.debug('replica: %i \t site: %s \t PNFS: %s \t ExpectedRate: %.3f' % (i, self.reps[i], self.arepsPNFS[i],self.aExpectedRates[i]))
class dataset:
    def __init__(self):
        self.complete=0
        self.incomplete=0
        self.files=[]

class site:
    host=''
    port=1094
    def __init__(self, ho):
        ho=ho.replace("root://","")
        self.host=ho.split(":")[0]
        if ho.count(":"):
            self.port=ho.split(":")[1]
        self.ddms=[]
    def prnt(self):
        print  'host:', self.host, '\tport:', self.port, '\tddms:', self.ddms

def getFiles(scope, DS):
    collFiles=[]
    cont=rucio.client.didclient.DIDClient().list_content(scope,DS)
    for f in cont:
        if f['type']=='DATASET':
            collFiles+=( getFiles(f['scope'],f['name']) )
        else:
            if f['name'].count('.root')==0 and not opts.NonRoot : continue
            collFiles.append(dsfile(f['scope'],f['name'],f['bytes'],f['adler32']))
    return collFiles
# =========================================================================================


(opts, args) = parser.parse_args()

if (len(args)==0):
    parser.print_help()
    exit(-1)

numeric_level = getattr(logging, opts.loglev.upper(), None)
if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level: %s' % opts.loglevel)

if (opts.logfile!=''):
    logging.basicConfig(format='%(asctime)s %(levelname)s:%(message)s', level=numeric_level, filename=opts.logfile)
else:
    logging.basicConfig(format='%(asctime)s %(levelname)s:%(message)s', level=numeric_level)

DS=args[0]

if os.environ.get("STORAGEPREFIX") != None:
    redir=os.environ.get("STORAGEPREFIX")
else:
    logging.error("no FAX redirector given. Please set up FAX (localSetupFAX) or run fax-setRedirector.(c)sh, first.")
    sys.exit(1)

if os.environ.get("RUCIO_ACCOUNT") != None:
    rucio_account=os.environ.get("RUCIO_ACCOUNT")
else:
    logging.error("no RUCIO_ACCOUNT environment found. Please set it before using this program.")
    sys.exit(1) 


sites={}


logging.debug('---------------getting FAX endpoints from AGISrepeater. ---------------')

try:
    req = urllib2.Request("http://atlas-agis-api.cern.ch/request/service/query/get_se_services/?json&state=ACTIVE&flavour=XROOTD", None)
    opener = urllib2.build_opener()
    f = opener.open(req)
    res=json.load(f)
    for s in res:
        logging.debug( s["name"]+'  '+s["rc_site"]+'  '+s["endpoint"])
        sites[s["rc_site"]]=site(s["endpoint"])
    # print res
except:
    logging.error("Could not get FAX endpoints from AGIS. Exiting...")
    logging.error("Unexpected error:%s" % str(sys.exc_info()[0]))
    sys.exit(1)
    
#for s in sites:  print s, sites[s].prnt()
    
    
logging.debug('--------------- Getting all of the DDM endpoints. ---------------')

try:
    req = urllib2.Request("http://atlas-agis-api.cern.ch/request/ddmendpoint/query/list/?json&state=ACTIVE", None)
    opener = urllib2.build_opener()
    f = opener.open(req)
    res=json.load(f)
    for s in res:
        sn=s["rc_site"]
        if sn in sites:
           # print sn, s["name"]
            sites[sn].ddms.append(s["name"])
   # print ' got related ddmendpoints from agis.'
except:
    logging.error("Could not get DDM endpoint names from AGIS. Exiting...")
    logging.error("Unexpected error:%s" % str(sys.exc_info()[0]))
    sys.exit(1)

#for s in sites: print s, sites[s].prnt()


# get a list of all scopes
AllScopes = rucio.client.scopeclient.ScopeClient().list_scopes()

# find the scope of the dataset we are dealing with
if DS.count(':')>0:
    spl=DS.split(':')
    scope=spl[0]
    DS=spl[1]
else:
    w=DS.split('.')
    if w[0].startswith('user') or w[0].startswith('group'):
        scope=w[0]+'.'+w[1]
    else:
        scope=w[0]

if scope not in AllScopes:
    logging.error('could not determine scope of this dataset. ')
    sys.exit(1)

Files=getFiles(scope,DS)

for f in Files: f.prnt()
   
# find file replicas
rrc=rucio.client.replicaclient.ReplicaClient()
for f in Files:
    reps=rrc.list_replicas([{'scope': f.scope, 'name': f.name}], schemes=['root'])
    for r in reps:
    	for key, value in r['rses'].iteritems():
    	    if len(value)==0: continue # has no FAX access point
    	    if len(value)>1: logging.warning("Site %s has multiple copies of the same file!" % key);
            f.reps.append(key)
            f.areps.append(key)
            f.arepsPNFS.append(value[0])
            f.aExpectedRates.append(0)

#for f in Files: f.prnt()

# find available replicas for each file
for f in Files:
    for i in range(len(f.reps)):
        for s in sites:
            for ddm in sites[s].ddms:
                if f.areps[i]!=ddm:
                    f.areps.pop(i)
                    f.arepsPNFS.pop(i)
                    f.aExpectedRates.pop(i)


for f in Files: f.prnt()


logging.debug('--------------- copying the files ----------------------')


class Command(object):

    def __init__(self, cmd):
        self.cmd = cmd
        self.process = None

    def run(self, timeout):
        def target():
            self.process = subprocess.Popen(self.cmd, shell=True)
            self.process.communicate()
        
        th = Thread(target=target)
        th.start()
        th.join(timeout)
        if th.is_alive():
            print 'Terminating process'
            self.process.terminate()
            th.join()
        return self.process.returncode
        
        
        
tocopy=0

def worker():
    while True:
        f=q.get()
        f.attempts+=1
        if f.attempts>opts.Retries: 
            logging.info('Desired number of retries reached. Giving up on this file.')
            q.task_done()
            return
        xcom='xrdcp -np '
        if opts.discard:
            xcom += '-f '
        xcom += redir+"/atlas/rucio/"+f.scope+":"+f.name + ' '
        if opts.discard: 
            xcom += '/dev/null'
        else:
            xcom += DS +'/' + f.name
        com=Command( xcom )
        t1=datetime.datetime.now()
        res=com.run(opts.Timeout)
        # print "return code:", res
        t2=datetime.datetime.now()
        dt=t2-t1
        dt=dt.seconds
        if dt<0.01: dt=0.01
        if res!=0:
            logging.error('Due to a failure the file: %s will be retried.'%f.name)
            q.put(f)
        else:
            logging.info("file copied in %s at %.3f MB/s.  Files not yet started: %i" % ( t2-t1, f.size/1024./1024./dt,q.qsize() ) )
        q.task_done()

q=Queue.Queue()
for i in range(int(opts.Streams)):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

    
if not os.path.exists(DS) and not opts.discard:
    os.makedirs(DS)
    
for r in Files:
    if ( opts.FilesToCopy>0 and tocopy>=opts.FilesToCopy): continue
    
    logging.debug('adding to queue %s:%s' % (r.scope, r.name))
    q.put(r)
    tocopy+=1

q.join()          
        
        
logging.info('All done.')



