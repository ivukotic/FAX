#!/usr/bin/env python

# to fix
# make sure number of parallel streams is respected
# check that files are copied right by checking their size 

import subprocess, Queue, os, sys,time, datetime
import threading
from threading import Thread
import urllib2
import optparse

import rucio
import rucio.client
import rucio.common.config as conf

try: import simplejson as json
except ImportError: import json


parser = optparse.OptionParser(description="Getting a DS through FAX.", version="%prog version 2.0", usage="Usage: %prog [options] dataset")

parser.add_option('-r', '--retries', help='a number of retries. Defaults to 3.', default=3, dest='Retries')
parser.add_option('-s', '--streams', help='a number of parallel xrdcp streams to use. Defaults to 4.', default=4, dest='Streams')
parser.add_option('-t', '--timeout', help='seconds to wait before timing out an individual xrdcp. Default is 3600.', default=3600, dest='Timeout')
parser.add_option('-f', '--files',   help='a number of files to copy', default=0, dest='FilesToCopy', metavar="N FILES")
parser.add_option('-x', '--extreme', help='use extreme copy', dest='Extreme', action='store_true', default=False)
parser.add_option('-i', '--incomplete', help='copy incomplete datasets too', dest='Incomplete', action='store_true', default=False)
parser.add_option('-g', '--nonRoot', help='copy non Root files too', dest='NonRoot', action='store_true', default=False)
parser.add_option('-v', '--verbose', action="store_true", dest="verbose", default=False)
parser.add_option('-q', '--quiet',   action="store_false", dest="verbose")



class dsfile:
    def __init__(self, sc, na, si, ad):
        self.scope=sc
        self.name=na
        self.size=si
        self.adler32=ad
        self.attempts=0
        self.reps=[]
        self.areps=[]
    def prnt(self):
        print 'file:',self.scope+':'+self.name,"\tsize:",str(self.size/1024/1024),"\tattempts:",str(self.attempts),"\treplicas:",self.reps,"\t available:",self.areps
    
class dataset:
    def __init__(self):
        self.complete=0
        self.incomplete=0
        self.files=[]

class site:
    host=''
    port=1094
    def __init__(self, ho):
        ho=ho.replace("root://","")
        self.host=ho.split(":")[0]
        if ho.count(":"):
            self.port=ho.split(":")[1]
        self.ddms=[]
    def prnt(self):
        print  'host:', self.host, '\tport:', self.port, '\tddms:', self.ddms

def getFiles(scope, DS):
    collFiles=[]
    cont=rucio.client.didclient.DIDClient().list_content(scope,DS)
    for f in cont:
        if f['type']=='DATASET':
            collFiles+=( getFiles(f['scope'],f['name']) )
        else:
            if f['name'].count('.root')==0 and not opts.NonRoot : continue
            collFiles.append(dsfile(f['scope'],f['name'],f['bytes'],f['adler32']))
    return collFiles
# =========================================================================================


(opts, args) = parser.parse_args()

if (len(args)==0):
    parser.print_help()
    exit(-1)

DS=args[0]

if os.environ.get("STORAGEPREFIX") != None:
    redir=os.environ.get("STORAGEPREFIX")
else:
    print "no FAX redirector given. Please set up FAX (localSetupFAX) or run fax-setRedirector.(c)sh, first. "
    sys.exit(1)

if os.environ.get("RUCIO_ACCOUNT") != None:
    rucio_account=os.environ.get("RUCIO_ACCOUNT")
else:
    print "no RUCIO_ACCOUNT environment found. Please set it before using this program. "
    sys.exit(1) 


sites={}

try:
    if (opts.verbose): print "#getting FAX endpoints from AGISrepeater..."
    req = urllib2.Request("http://atlas-agis-api.cern.ch/request/service/query/get_se_services/?json&state=ACTIVE&flavour=XROOTD", None)
    opener = urllib2.build_opener()
    f = opener.open(req)
    res=json.load(f)
    for s in res:
        if (opts.verbose): print s["name"], s["rc_site"], s["endpoint"]
        sites[s["rc_site"]]=site(s["endpoint"])
    # print res
except:
    print "Could not get FAX endpoints from AGIS. Exiting..."
    print "Unexpected error:", sys.exc_info()[0]
    sys.exit(1)
    
#for s in sites:  print s, sites[s].prnt()
    
    
if (opts.verbose):  print '--------------- Getting all of the DDM endpoints. ---------------'

try:
    req = urllib2.Request("http://atlas-agis-api.cern.ch/request/ddmendpoint/query/list/?json&state=ACTIVE", None)
    opener = urllib2.build_opener()
    f = opener.open(req)
    res=json.load(f)
    for s in res:
        sn=s["rc_site"]
        if sn in sites:
           # print sn, s["name"]
            sites[sn].ddms.append(s["name"])
   # print ' got related ddmendpoints from agis.'
except:
    print "Could not get DDM endpoint names from AGIS. Exiting..."
    print "Unexpected error:", sys.exc_info()[0]
    sys.exit(1)

#for s in sites: print s, sites[s].prnt()


# get a list of all scopes
AllScopes = rucio.client.scopeclient.ScopeClient().list_scopes()

# find the scope of the dataset we are dealing with
if DS.count(':')>0:
    spl=DS.split(':')
    scope=spl[0]
    DS=spl[1]
else:
    w=DS.split('.')
    if w[0].startswith('user') or w[0].startswith('group'):
        scope=w[0]+'.'+w[1]
    else:
        scope=w[0]

if scope not in AllScopes:
    print 'ERROR: could not determine scope of this dataset. '
    sys.exit(1)

Files=getFiles(scope,DS)

if (opts.verbose):
    for f in Files: f.prnt()
   
# find file replicas
rrc=rucio.client.replicaclient.ReplicaClient()
for f in Files:
    reps=rrc.list_replicas([{'scope': f.scope, 'name': f.name}])
    for r in reps:
        f.reps=r['rses'].keys()

for f in Files: f.prnt()

# find available replicas for each file
for f in Files:
    for r in f.reps:
        for s in sites:
            for ddm in sites[s].ddms:
                if r==ddm:
                    f.areps.append(r)


for f in Files: f.prnt()


if (opts.verbose):  print '--------------- copying the files ----------------------'


class Command(object):

    def __init__(self, cmd):
        self.cmd = cmd
        self.process = None

    def run(self, timeout):
        def target():
            self.process = subprocess.Popen(self.cmd, shell=True)
            self.process.communicate()
        
        th = Thread(target=target)
        th.start()
        th.join(timeout)
        if th.is_alive():
            print 'Terminating process'
            self.process.terminate()
            th.join()
        return self.process.returncode
        
        
        
tocopy=0

def worker():
    while True:
        f=q.get()
        f.attempts+=1
        if f.attempts>opts.Retries: 
            print 'Desired number of retries reached. Giving up on this file.'
            q.task_done()
            return
        xcom='xrdcp -np '+ redir+"/atlas/rucio/"+f.scope+":"+f.name + ' '+DS+'/'+f.name
        com=Command( xcom )
        t1=datetime.datetime.now()
        res=com.run(opts.Timeout)
        # print "return code:", res
        t2=datetime.datetime.now()
        dt=t2-t1
        dt=dt.seconds
        if dt<0.01: dt=0.01
        if res!=0:
            print 'Due to a failure the file: ',f.name,'will be retried.'
            q.put(f)
        else:
            print "file copied in ", t2-t1, "at", f.size/1024./1024./dt,"MB/s.   Still in queue: ",q.qsize()
        q.task_done()

q=Queue.Queue()
for i in range(int(opts.Streams)):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

    
if not os.path.exists(DS):
    os.makedirs(DS)
    
for r in Files:
    if ( opts.FilesToCopy>0 and tocopy>=opts.FilesToCopy): continue
    
    if (opts.verbose): print 'adding to queue ', r.scope+":"+r.name
    q.put(r)
    tocopy+=1

q.join()          
        
        
print 'All done.'



