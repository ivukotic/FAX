#!/usr/bin/env python

# to fix
# check that files are copied right by checking their size 

import fax

import signal, subprocess, Queue, os, sys,time, datetime
import threading
from threading import Thread
import urllib2
import optparse, logging

try: import simplejson as json
except ImportError: import json


parser = optparse.OptionParser(description="Getting a DS through FAX.", version="%prog version 2.0", usage="Usage: %prog [options] dataset")

parser.add_option('-r', '--retries', help='a number of retries. Defaults to 3.', default=3, dest='Retries')
parser.add_option('-s', '--streams', help='a number of parallel xrdcp streams to use. Defaults to 4.', default=4, dest='Streams')
parser.add_option('-t', '--timeout', help='seconds to wait before timing out an individual xrdcp. Default is 3600.', default=3600, dest='Timeout')
parser.add_option('-f', '--files',   help='a number of files to copy', default=0, dest='FilesToCopy', metavar="N FILES")
parser.add_option('-x', '--extreme', help='use extreme copy', dest='Extreme', action='store_true', default=False)
parser.add_option('-i', '--incomplete', help='copy incomplete datasets too', dest='Incomplete', action='store_true', default=False)
parser.add_option('-g', '--nonRoot', help='copy non Root files too', dest='NonRoot', action='store_true', default=False)
parser.add_option('-l', '--log', help='logging level (DEBUG, INFO, WARNING, ERROR)', default="INFO", dest='loglev')
parser.add_option('-o', '--out', help='file to write logging stream into', default="", dest='logfile')
parser.add_option('-d', '--discard', help='copy to /dev/null. Only for performance measurements.', default=False, action='store_true', dest='discard')
parser.add_option('-p', '--pnfs', help='Use pnfs access paths.', default=False, action='store_true', dest='PNFSaccess')




def signal_handler(signal, frame):
    logging.info('You pressed Ctrl+C!')
    with q.mutex:
        q.queue.clear()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)


(opts, args) = parser.parse_args()

if (len(args)==0):
    parser.print_help()
    exit(-1)

numeric_level = getattr(logging, opts.loglev.upper(), None)
if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level: %s' % opts.loglevel)

if (opts.logfile!=''):
    logging.basicConfig(format='%(asctime)s %(levelname)s:%(message)s', level=numeric_level, filename=opts.logfile)
else:
    logging.basicConfig(format='%(asctime)s %(levelname)s:%(message)s', level=numeric_level)

DS=args[0]

if os.environ.get("STORAGEPREFIX") != None:
    redir=os.environ.get("STORAGEPREFIX")
else:
    logging.error("no FAX redirector given. Please set up FAX (localSetupFAX) or run fax-setRedirector.(c)sh, first.")
    sys.exit(1)

if os.environ.get("RUCIO_ACCOUNT") != None:
    rucio_account=os.environ.get("RUCIO_ACCOUNT")
else:
    logging.error("no RUCIO_ACCOUNT environment found. Please set it before using this program.")
    sys.exit(1) 

endpoints = fax.getFAXendpoints()    
for s in endpoints: endpoints[s].prnt()


logging.debug('---------------- Determine the closest FAX endpoint. ---------------')
# find what is the closest FAX site. We get it from 'redir' 
destinationSite=None
for s in endpoints:
    if endpoints[s].host==redir.lstrip('root://').rstrip('/'):
        destinationSite=endpoints[s].name
        logging.debug('closest site set to %s' % destinationSite)

if not destinationSite:
    logging.debug('could not find a FAX endpoint served by %s' % redir)

# download cost values from all the endpoints to it 
costs = fax.getCostMatrix(destinationSite)
        

# get the dataset scope
scope, DS = fax.getScope(DS)
if not scope:
    sys.exit(1)
    
Files = fax.getFiles(scope,DS,opts.NonRoot)

# for f in Files: f.prnt()

logging.debug('finding file replicas.')

for f in Files:
    f.findReplicas()

logging.debug('Done.')

#for f in Files: f.prnt()


# remove all replicas not available in FAX
# set site and costs for the rest
for f in Files:   
    #print len(f.reps), len(f.endpoints), len(f.PNFS), len(f.expectedRates)
    for i in range(len(f.reps)):
        ddmEndpointCovered=False
        for s in endpoints:  #loop all the FAX endpoints
            for ddm in endpoints[s].ddms: # and all of their ddms
                if f.reps[i]==ddm: # if it is found set site and cost
                    ddmEndpointCovered=True
                    f.endpoints[i]=s
                    if destinationSite and (s in costs):
                        f.expectedRates[i]=costs[s]
        if not ddmEndpointCovered:
            logging.debug('DDM not covered by FAX')
            f.expectedRates[i]=-1
        
for f in Files: f.prnt()


logging.debug('--------------- copying the files ----------------------')

class Command(object):

    def __init__(self, cmd):
        self.cmd = cmd
        self.process = None

    def run(self, timeout):
        def target():
            self.process = subprocess.Popen(self.cmd, shell=True)
            self.process.communicate()
        
        th = Thread(target=target)
        th.start()
        th.join(timeout)
        if th.is_alive():
            print 'Terminating process'
            self.process.terminate()
            th.join()
        return self.process.returncode
        
        
tocopy=0

def worker():
    while True:
        f=q.get()
        f.attempts+=1
        if f.attempts>opts.Retries: 
            logging.info('Desired number of retries reached. Giving up on this file.')
            q.task_done()
            return
        xcom='xrdcp -np '
        if opts.discard:
            xcom += '-f '
        
        if opts.PNFSaccess: 
            #should be changed to access the different one on higher attempts. 
            pfn = f.getPNFS(f.attempts-1)
            if not pfn:
                q.task_done()
            xcom += pfn + ' '
        else:
            xcom += redir+"/atlas/rucio/"+f.scope+":"+f.name + ' '
        
        if opts.discard: 
            xcom += '/dev/null'
        else:
            xcom += DS +'/' + f.name
        print xcom
        com=Command( xcom )
        t1=datetime.datetime.now()
        res=com.run(opts.Timeout)
        # print "return code:", res
        t2=datetime.datetime.now()
        dt=t2-t1
        dt=dt.seconds
        if dt<0.01: dt=0.01
        if res!=0:
            logging.error('Due to a failure the file: %s will be retried.'%f.name)
            q.put(f)
        else:
            logging.info("file copied in %s at %.3f MB/s.  Files not yet started: %i" % ( t2-t1, f.size/1024./1024./dt,q.qsize() ) )
        q.task_done()

q=Queue.Queue()
for i in range(int(opts.Streams)):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

    
if not os.path.exists(DS) and not opts.discard:
    os.makedirs(DS)
    
for r in Files:
    if ( opts.FilesToCopy>0 and tocopy>=opts.FilesToCopy): continue
    
    logging.debug('adding to queue %s:%s' % (r.scope, r.name))
    q.put(r)
    tocopy+=1

q.join()          
        
        
logging.info('All done.')



