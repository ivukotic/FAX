#!/usr/bin/env python

import os, sys, logging
import urllib2
import optparse

import rucio
import rucio.client
import rucio.common.config as conf

try: import simplejson as json
except ImportError: import json

import fax

parser = optparse.OptionParser(description="Checks if dataset is accessible through FAX.", version="%prog version 3.0", usage="Usage: %prog [options] dataset")
parser.add_option('-l', '--log', help='logging level (DEBUG, INFO, WARNING, ERROR)', default="INFO", dest='loglev')
parser.add_option('-o', '--out', help='file to write logging stream into', default="", dest='logfile')



(opts, args) = parser.parse_args()

if (len(args)==0):
    parser.print_help()
    exit(-1)

DS=args[0]


numeric_level = getattr(logging, opts.loglev.upper(), None)
if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level: %s' % opts.loglevel)

if (opts.logfile!=''):
    logging.basicConfig(format='%(asctime)s %(levelname)s:%(message)s', level=numeric_level, filename=opts.logfile)
else:
    logging.basicConfig(format='%(asctime)s %(levelname)s:%(message)s', level=numeric_level)
    
if os.environ.get("STORAGEPREFIX") != None:
    redir=os.environ.get("STORAGEPREFIX")
else:
    logging.error("no FAX redirector given. Please set up FAX (localSetupFAX) or run fax-setRedirector.(c)sh, first.")
    sys.exit(1)

if os.environ.get("RUCIO_ACCOUNT") != None:
    rucio_account=os.environ.get("RUCIO_ACCOUNT")
else:
    logging.error("no RUCIO_ACCOUNT environment found. Please set it before using this program.")
    sys.exit(1) 


endpoints = fax.getFAXendpoints()    
for s in endpoints: endpoints[s].prnt()



# get the dataset scope
scope, DS = fax.getScope(DS)
if not scope:
    sys.exit(1)

    
Files = fax.getFiles(scope,DS)


fax.getReplicas(Files)
    

missing=0
found=0
totreplicas=0

for f in Files:   
    #print len(f.reps), len(f.endpoints), len(f.PNFS), len(f.expectedRates)
    ddmEndpointsCovered=0
    for i in range(len(f.reps)):
        for s in endpoints:  #loop all the FAX endpoints
            for ddm in endpoints[s].ddms: # and all of their ddms
                if f.reps[i]==ddm: # if it is found set site and cost
                    ddmEndpointsCovered+=1
    if ddmEndpointsCovered:
        found += 1
        totreplicas += ddmEndpointsCovered
    else:
        missing += 1
        
for f in Files: f.prnt()
               
print "Dataset contains",missing+found,"files."

if found==0: 
    print "At the moment none of them can be accessed using FAX."
    sys.exit(0)
    
if missing==0: 
    print "At the moment all of them can be accessed using FAX."
else:
    print "At the moment",found,"can be accessed using FAX.", missing, "don't have a replica at the working FAX endpoint."

print "in average files have ", totreplicas/found, "replicas."