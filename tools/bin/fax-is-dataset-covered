#!/usr/bin/env python

import subprocess, threading, os, sys 
import urllib2
import optparse

import rucio
import rucio.client
import rucio.common.config as conf

try: import simplejson as json
except ImportError: import json

parser = optparse.OptionParser(description="Checks if dataset is accessible through FAX.", version="%prog version 2.0", usage="Usage: %prog [options] dataset")

parser.add_option('-v', '--verbose', action="store_true", dest="verbose", default=False)
parser.add_option('-q', '--quiet',   action="store_false", dest="verbose")


class dsfile:
    def __init__(self, sc, na, si, ad):
        self.scope=sc
        self.name=na
        self.size=si
        self.adler32=ad
        self.reps=[]
        self.areps=[]
    def prnt(self):
        print 'file:',self.scope+':'+self.name,"\tsize:",str(self.size/1024/1024),"\treplicas:",self.reps,"\t available:",self.areps

def getFiles(scope, DS):
    collFiles=[]
    cont=rucio.client.didclient.DIDClient().list_content(scope,DS)
    for f in cont:
        if f['type']=='DATASET':
            collFiles+=( getFiles(f['scope'],f['name']) )
        else:
            collFiles.append(dsfile(f['scope'],f['name'],f['bytes'],f['adler32']))
    return collFiles


(opts, args) = parser.parse_args()


if (len(args)==0):
    parser.print_help()
    exit(-1)

DS=args[0]

 
if os.environ.get("RUCIO_ACCOUNT") != None:
    rucio_account=os.environ.get("RUCIO_ACCOUNT")
else:
    print "no RUCIO_ACCOUNT environment found. Please set it before using this program. "
    sys.exit(1) 


#print 'Geting data from AGIS ...'

class site:    
    name=''
    host=''
    port=1094
     
    def __init__(self, na, ho):
        self.name=na
        ho=ho.replace("root://","")
        self.host=ho.split(":")[0]
        if ho.count(":"):
            self.port=ho.split(":")[1]
    
    def prnt(self, what):
        if (what>=0 and self.redirector!=what): return
        print  'name:', self.name, '\thost:', self.host, '\tport:', self.port 

sites=[];

try:
    req = urllib2.Request("http://atlas-agis-api.cern.ch/request/service/query/get_se_services/?json&state=ACTIVE&flavour=XROOTD", None)
    opener = urllib2.build_opener()
    f = opener.open(req)
    res=json.load(f)
    for s in res:
        if (opts.verbose): print s["name"], s["rc_site"], s["endpoint"]
        ns = site( s["rc_site"], s["endpoint"] )
        sites.append(ns)
except:
    print "Unexpected error:", sys.exc_info()[0]    
    
if (opts.verbose):
    print 'Got FAX SEs from AGIS:'
    for s in sites: s.prnt(-1)

allddms=set()

try:
    req = urllib2.Request("http://atlas-agis-api.cern.ch/request/ddmendpoint/query/list/?json&state=ACTIVE", None)
    opener = urllib2.build_opener()
    f = opener.open(req)
    res=json.load(f)
    for s in res:
        for c in sites:
            if s["rc_site"]==c.name:
                allddms.add(s["name"])
                break
except:
    print "Unexpected error:", sys.exc_info()[0]    

if (opts.verbose):
    print 'Got related ddmendpoints from agis:'
    print allddms

# find the scope of the dataset we are dealing with
if DS.count(':')>0:
    spl=DS.split(':')
    scope=spl[0]
    DS=spl[1]
else:
    w=DS.split('.')
    if w[0].startswith('user') or w[0].startswith('group'):
        scope=w[0]+'.'+w[1]
    else:
        scope=w[0]

rdc=rucio.client.didclient.DIDClient()
Files=getFiles(scope,DS)

rrc=rucio.client.replicaclient.ReplicaClient()
reps=rrc.list_replicas([{'scope': scope, 'name': DS}])
for r in reps:
    # print r
    for f in Files: 
        if f.name==r['name']:
            f.reps=r['rses'].keys()
            
# find available replicas for each file
missing=0
found=0
totreplicas=0
for f in Files:
    for r in f.reps:
        if (r in allddms):
            f.areps.append(r)
    if (f.areps==0):
        missing+=1
    else:
        found+=1
    totreplicas+=len(f.areps)

if (opts.verbose): 
    for f in Files: f.prnt()
               
print "Dataset contains",missing+found,"files."

if found==0: 
    print "At the moment none of them can be accessed using FAX."
    exit(0)
    
if missing==0: 
    print "At the moment all of them can be accessed using FAX."
else:
    print "At the moment",found,"can be accessed using FAX.", missing, "don't have a replica at the working FAX endpoint."

print "in average files have ", totreplicas/found, "replicas."