#!/usr/bin/env python

import subprocess, threading, os, sys
import urllib2
import optparse

try: import simplejson as json
except ImportError: import json

parser = optparse.OptionParser(description="Getting a DS through FAX.", version="%prog version 1.0", usage="Usage: %prog [options] dataset")

parser.add_option('-s', '--streams', help='a number of parallel xrdcp streams to use. Defaults to 10.', default=10)
parser.add_option('-x', '--extreme', help='use extream copy', dest='bool', default=False, action='store_true')
parser.add_option('-i', '--incomplete', help='copy incomplete datasets too', dest='bool', default=False, action='store_true')


try:
    import dq2.clientapi.cli.cliutil
    from dq2.common.cli.DQDashboardTool import DQDashboardTool
    from dq2.clientapi.cli.cliutil import getDQ2
    from dq2.filecatalog.lfc.lfcconventions import to_native_lfn
except ImportError:
    print "Environment not set [error importing DQ2 dependencies]!"
    sys.exit(1)


class Command(object):

    def __init__(self, cmd):
        self.cmd = cmd
        self.process = None

    def run(self, timeout):
        def target():
#            print 'command started: ', self.cmd
            self.process = subprocess.Popen(self.cmd, shell=True)
            self.process.communicate()

        thread = threading.Thread(target=target)
        thread.start()

        thread.join(timeout)
        if thread.is_alive():
            print 'Terminating process'
            self.process.terminate()
            thread.join()
        return self.process.returncode



class site:
    host=''
    port=1094
    def __init__(self, ho):
        ho=ho.replace("root://","")
        self.host=ho.split(":")[0]
        if ho.count(":"):
            self.port=ho.split(":")[1]
        self.ddms=[]
    def prnt(self):
        print  'host:', self.host, '\tport:', self.port, '\tddms:', self.ddms




(opts, args) = parser.parse_args()

if (len(args)==0):
    parser.print_help()
    exit(-1)

DS=args[0]



sites={};


print 'Geting FAX endpoints from AGIS ...'

try:
    req = urllib2.Request("http://atlas-agis-api.cern.ch/request/service/query/get_se_services/?json&state=ACTIVE&flavour=XROOTD", None)
    opener = urllib2.build_opener()
    f = opener.open(req)
    res=json.load(f)
    for s in res:
#        print s["name"], s["rc_site"], s["endpoint"]
        sites[s["rc_site"]]=site(s["endpoint"])
#    print res
#    print ' got FAX SEs from AGIS.'
except:
    print "Unexpected error:", sys.exc_info()[0]

for s in sites: 
    print s, sites[s].prnt()
    
print 'Getting all of the DDM endpoints.'

try:
    req = urllib2.Request("http://atlas-agis-api.cern.ch/request/ddmendpoint/query/list/?json&state=ACTIVE", None)
    opener = urllib2.build_opener()
    f = opener.open(req)
    res=json.load(f)
    for s in res:
        sn=s["rc_site"]
        if sn in sites:
            print sn, s["name"]
            sites[sn].ddms.append(s["name"])
                
#    print ' got related ddmendpoints from agis.'

except:
    print "Unexpected error:", sys.exc_info()[0]

#for s in sites: print s, sites[s].prnt()

exit(0)

print 'Getting all of the DDM endpoints having a replica.'
com=Command('dq2-ls -r '+ DS + ' > fax.tmp' )
com.run(300)
dsets={}
cds=''
f = open('fax.tmp', 'r')
for line in f:
    if line.startswith('Multiple'): break
    line=line.strip()
    if line.count(':')==0:continue
    line=line.split(":")
  #  print line

    if line[0]=='INCOMPLETE':
        if len(line[1])==0: continue
        rep=line[1].split(',')
        for r in rep:
            r=r.strip()
            if r in allddms:
                dsets[cds][0]+=1
        continue

    if line[0]=='COMPLETE':
        if len(line[1])==0: continue
        rep=line[1].split(',')
        for r in rep:
            r=r.strip()
            if r in allddms:
                dsets[cds][1]+=1
        continue

    cds=line[0]
    dsets[cds]=[0,0]

for d  in dsets.keys():
    print d,'\tcomplete replicas:',dsets[d][1],'\tincomplete:',dsets[d][0]